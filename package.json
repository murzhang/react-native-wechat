{
  "_args": [
    [
      {
        "raw": "git+https://github.com/yorkie/react-native-wechat.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+https://github.com/yorkie/react-native-wechat.git",
        "spec": "git+https://github.com/yorkie/react-native-wechat.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:yorkie/react-native-wechat.git",
          "sshUrl": "git+ssh://git@github.com/yorkie/react-native-wechat.git",
          "httpsUrl": "git+https://github.com/yorkie/react-native-wechat.git",
          "gitUrl": "git://github.com/yorkie/react-native-wechat.git",
          "shortcut": "github:yorkie/react-native-wechat",
          "directUrl": "https://raw.githubusercontent.com/yorkie/react-native-wechat/master/package.json"
        }
      },
      "d:\\USEABCV2\\SourceCode\\YSApp"
    ]
  ],
  "_from": "git+https://github.com/yorkie/react-native-wechat.git",
  "_id": "react-native-wechat@1.9.5",
  "_inCache": true,
  "_location": "/react-native-wechat",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+https://github.com/yorkie/react-native-wechat.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+https://github.com/yorkie/react-native-wechat.git",
    "spec": "git+https://github.com/yorkie/react-native-wechat.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:yorkie/react-native-wechat.git",
      "sshUrl": "git+ssh://git@github.com/yorkie/react-native-wechat.git",
      "httpsUrl": "git+https://github.com/yorkie/react-native-wechat.git",
      "gitUrl": "git://github.com/yorkie/react-native-wechat.git",
      "shortcut": "github:yorkie/react-native-wechat",
      "directUrl": "https://raw.githubusercontent.com/yorkie/react-native-wechat/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/yorkie/react-native-wechat.git#31133dc03227251d4ba32c0a634d1c0d0520cc1a",
  "_shasum": "71c19dd01e0367441a4b658e4b4013ffc9784545",
  "_shrinkwrap": null,
  "_spec": "git+https://github.com/yorkie/react-native-wechat.git",
  "_where": "d:\\USEABCV2\\SourceCode\\YSApp",
  "author": {
    "name": "Yorkie Liu",
    "email": "yorkiefixer@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/weflex/react-native-wechat/issues"
  },
  "contributors": [
    {
      "name": "Yorkie Liu",
      "email": "yorkiefixer@gmail.com"
    },
    {
      "name": "Deng Yun",
      "email": "tdzl2003@gmail.com"
    }
  ],
  "dependencies": {
    "events": "1.0.2"
  },
  "description": "react-native library for wechat app",
  "devDependencies": {},
  "gitHead": "31133dc03227251d4ba32c0a634d1c0d0520cc1a",
  "homepage": "https://github.com/weflex/react-native-wechat#readme",
  "keywords": [
    "wechat",
    "react",
    "react-native",
    "react-component",
    "ios"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "react-native-wechat",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.40"
  },
  "readme": "![react-native-wechat logo](./logo.jpg?raw=true)\r\n\r\n## Table of Contents\r\n\r\n- [Build](#build)\r\n- [Linking Steps](#linking-steps)\r\n  - [Linking iOS](#linking-ios)\r\n  - [Linking Android with Gradle](#linking-android-with-gradle)\r\n- [API Documentation](#api-documentation)\r\n  - [`registerApp(appid)`](#registerappappid)\r\n  - [`registerAppWithDescription(appid, appdesc)`](#registerappappid)\r\n  - [`isWXAppInstalled()`](#iswxappinstalled)\r\n  - [`isWXAppSupportApi()`](#iswxappsupportapi)\r\n  - [`getApiVersion()`](#iswxappsupportapi)\r\n  - [`openWXApp()`](#openwxapp)\r\n  - [`sendAuthRequest([scope[, state]])`](#sendauthrequestscope-state)\r\n  - [`shareToTimeline(data)`](#sharetotimelinedata)\r\n  - [`shareToSession(data)`](#sharetosessiondata)\r\n  - [`pay(data)`](#paydata)\r\n  - [`addListener(eventType, listener[, context])`](#addlistenereventtype-listener-context)\r\n  - [`once(eventType, listener[, context])`](#onceeventtype-listener-context)\r\n  - [`removeAllListeners()`](#removealllisteners)\r\n- [Installation](#installation)\r\n- [Community](#community)\r\n- [Who Use It](#who-use-it)\r\n- [Authors](#authors)\r\n- [License](#license)\r\n\r\n## Build\r\n\r\nReact-Native bridge static library for WeChat SDK which requires:\r\n\r\n- [x] iOS SDK 1.7.2\r\n- [x] Android SDK 221\r\n\r\nAnd [react-native-wechat] has the following tracking data in open source world:\r\n\r\n| type        | badge                                           |\r\n|-------------|-------------------------------------------------|\r\n| NPM         | [![NPM version][npm-image]][npm-url]            |\r\n| Dependency  | [![Dependency Status][david-image]][david-url]  |\r\n| Downloads   | [![Downloads][downloads-image]][downloads-url]  |\r\n\r\n## Linking Steps\r\n\r\nBefore using this library to work with your app, you should follow the below steps to link this library with\r\nyour app project, _if there is something that not working, please check the list here_.\r\n\r\n### Linking iOS\r\n\r\n- Link `RCTWeChat` library from your `node_modules/react-native-wechat/ios` folder like react-native's \r\n[Linking Libraries iOS Guidance], Note: _Don't forget to add it to \"Build Phases\" of your target project_.\r\n\r\n- Add the following libraries to your \"Link Binary with Libraries\":\r\n\r\n    ```\r\n    SystemConfiguration.framework\r\n    CoreTelephony.framework\r\n    libsqlite3.0\r\n    libc++\r\n    libz\r\n    ```\r\n\r\n- Add \"URL Schema\" as your app id for \"URL type\" in `Targets` > `info`, See the following screenshot for the view on your XCode\r\n    ![Set URL Schema in XCode](https://res.wx.qq.com/open/zh_CN/htmledition/res/img/pic/app-access-guide/ios/image0042168b9.jpg)\r\n\r\n- Only for iOS 9, add `wechat` and `weixin` into `LSApplicationQueriesSchemes` in `Targets` > `info` > `Custom iOS Target Properties`. Or edit `Info.plist` then add:\r\n\r\n    ```\r\n      <key>LSApplicationQueriesSchemes</key>\r\n      <array>\r\n        <string>weixin</string>\r\n        <string>wechat</string>\r\n      </array>\r\n    ```\r\n\r\n\r\n- Code the following in `AppDelegate.m` of your project to enable [LinkingIOS]\r\n\r\n    ```objective-c\r\n    #import \"../Libraries/LinkingIOS/RCTLinkingManager.h\"\r\n    \r\n    - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\r\n    sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\r\n    {\r\n      return [RCTLinkingManager application:application openURL:url\r\n                                sourceApplication:sourceApplication annotation:annotation];\r\n    }\r\n    ```\r\n\r\n### Linking Android with Gradle\r\n\r\n- Add following lines into `android/settings.gradle`\r\n\r\n    ```gradle\r\n    include ':RCTWeChat'\r\n    project(':RCTWeChat').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-wechat/android')\r\n    ```\r\n\r\n- Add following lines into your `android/app/build.gradle` in section `dependencies`\r\n\r\n    ```gradle\r\n    dependencies {\r\n      compile project(':RCTWeChat')    // Add this line only.\r\n    }\r\n    ```\r\n\r\n- Add following lines into `MainActivity.java` or `MainApplication.java`:\r\n\r\n    ```java\r\n    import com.theweflex.react.WeChatPackage;       // Add this line before public class MainActivity\r\n    ...\r\n\r\n    /**\r\n     * A list of packages used by the app. If the app uses additional views\r\n     * or modules besides the default ones, add more packages here.\r\n     */\r\n    @Override\r\n    protected List<ReactPackage> getPackages() {\r\n      return Arrays.<ReactPackage>asList(\r\n        new MainReactPackage(), \r\n        new WeChatPackage()        // Add this line\r\n      );\r\n    }\r\n    ```\r\n\r\n- Create a package named 'wxapi' in your application package and a class named 'WXEntryActivity' in it. \r\n  This is required to get authorization and sharing response from wechat.\r\n\r\n    ```java\r\n    package your.package.wxapi;\r\n\r\n    import android.app.Activity;\r\n    import android.os.Bundle;\r\n    import com.theweflex.react.WeChatModule;\r\n\r\n    public class WXEntryActivity extends Activity {\r\n      @Override\r\n      protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        WeChatModule.handleIntent(getIntent());\r\n        finish();\r\n      }\r\n    }\r\n    ```\r\n\r\n- (Optional) Create a package named 'wxapi' in your application package and a class named 'WXPayEntryActivity'\r\n  in it. This is required to get payment response from WeChat.\r\n\r\n    ```java\r\n    package your.package.wxapi;\r\n\r\n    import android.app.Activity;\r\n    import android.os.Bundle;\r\n    import com.theweflex.react.WeChatModule;\r\n\r\n    public class WXPayEntryActivity extends Activity {\r\n      @Override\r\n      protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        WeChatModule.handleIntent(getIntent());\r\n        finish();\r\n      }\r\n    }\r\n    ```\r\n\r\n- Add activity declare in your AndroidManifest.xml\r\n\r\n    ```xml\r\n    <manifest>\r\n      <application>\r\n        <activity\r\n          android:name=\".wxapi.WXEntryActivity\"\r\n          android:label=\"@string/app_name\"\r\n          android:exported=\"true\"\r\n        />\r\n        <activity\r\n          android:name=\".wxapi.WXPayEntryActivity\"\r\n          android:label=\"@string/app_name\"\r\n          android:exported=\"true\"\r\n        />\r\n      </application>\r\n    </manifest>\r\n    ```\r\n\r\n- Add these lines to 'proguard-rules.pro':\r\n\r\n    ```pro\r\n    -keep class com.tencent.mm.sdk.** {\r\n       *;\r\n    }\r\n    ```\r\n\r\n## API Documentation\r\n\r\n[react-native-wechat] supports the following methods to get information and do something functions\r\nwith WeChat app.\r\n\r\n#### registerApp(appid)\r\n\r\nYou should call this function in global, calling over twice would throw an error.\r\n\r\n  ```js\r\n  // If you register here\r\n  componentDidMount (){\r\n    wechat.registerApp('your appid')\r\n  }\r\n  ```\r\n\r\n- {String} `appid` the appid you get from WeChat dashboard\r\n- returns {Promise} \r\n\r\n#### registerAppWithDescription(appid, appdesc)\r\n\r\nOnly available on iOS.\r\n\r\n- {String} `appid` the appid you get from WeChat dashboard\r\n- {String} `appdesc` the description of your app\r\n- returns {Promise} \r\n\r\n#### isWXAppInstalled() \r\n\r\nCheck if wechat installed in this app.\r\n\r\n- returns {Promise} Contain the result.\r\n\r\n#### isWXAppSupportApi()\r\n\r\nCheck if wechat support open url.\r\n\r\n- returns {Promise}  Contain the result.\r\n\r\n#### getApiVersion()\r\n\r\nGet api version of WeChat SDK.\r\n\r\n- returns {Promise}  Contain the result.\r\n\r\n#### openWXApp()\r\n\r\nOpen WeChat app with an optional callback argument.\r\n\r\n- returns {Promise} \r\n\r\n#### sendAuthRequest([scope[, state]])\r\n\r\nSend authentication request, namely login.\r\n\r\n- {Array|String} `scope` Scopes of auth request.\r\n- {String} `state` the state of OAuth2\r\n- returns {Promise}\r\n\r\nAnd it returns:\r\n\r\n| name    | type   | description                         |\r\n|---------|--------|-------------------------------------|\r\n| errCode | Number |                                     |\r\n| errStr  | String | Error message if any error occurred |\r\n| openId  | String |                                     |\r\n| code    | String | Authorization code                  |\r\n| url     | String | The URL string                      |\r\n| lang    | String | The user language                   | \r\n| country | String | The user country                    |\r\n\r\n#### shareToTimeline(data)\r\n\r\nShare a message to timeline (朋友圈).\r\n\r\n- {Object} `data` contain the message to send\r\n    - {String} `thumbImage` Thumb image of the message, which can be a uri or a resource id.\r\n    - {String} `type` Type of this message. Can be {news|text|imageUrl|imageFile|imageResource|video|audio|file}\r\n    - {String} `webpageUrl` Required if type equals `news`. The webpage link to share.\r\n    - {String} `imageUrl` Provide a remote image if type equals `image`.\r\n    - {String} `videoUrl` Provide a remote video if type equals `video`.\r\n    - {String} `musicUrl` Provide a remote music if type equals `audio`.\r\n    - {String} `filePath` Provide a local file if type equals `file`.\r\n    - {String} `fileExtension` Provide the file type if type equals `file`.\r\n\r\nAnd returns:\r\n\r\n| name    | type   | description                         |\r\n|---------|--------|-------------------------------------|\r\n| errCode | Number | 0 if authorization successed        |\r\n| errStr  | String | Error message if any error occurred |\r\n\r\nThese example code need 'react-native-chat' and 'react-native-fs' plugin.\r\n\r\n```js\r\nimport * as WeChat from 'react-native-wechat';\r\nimport fs from 'react-native-fs';\r\nlet resolveAssetSource = require('resolveAssetSource');\r\n\r\n// Code example to share text message:\r\ntry {\r\n  let result = await WeChat.shareToTimeline({\r\n    type: 'text', \r\n    description: 'hello, wechat'\r\n  });\r\n  console.log('share text message to time line successful:', result);\r\n} catch (e) {\r\n  if (e instanceof WeChat.WechatError) {\r\n    console.error(e.stack);\r\n  } else {\r\n    throw e;\r\n  }\r\n}\r\n\r\n// Code example to share image url:\r\n// Share raw http(s) image from web will always fail with unknown reason, please use image file or image resource instead\r\ntry {\r\n  let result = await WeChat.shareToTimeline({\r\n    type: 'imageUrl',\r\n    title: 'web image',\r\n    description: 'share web image to time line',\r\n    mediaTagName: 'email signature',\r\n    messageAction: undefined,\r\n    messageExt: undefined,\r\n    imageUrl: 'http://www.ncloud.hk/email-signature-262x100.png'\r\n  });\r\n  console.log('share image url to time line successful:', result);\r\n} catch (e) {\r\n  if (e instanceof WeChat.WechatError) {\r\n    console.error(e.stack);\r\n  } else {\r\n    throw e;\r\n  }\r\n}\r\n\r\n// Code example to share image file:\r\ntry {\r\n  let rootPath = fs.DocumentDirectoryPath;\r\n  let savePath = rootPath + '/email-signature-262x100.png';\r\n  console.log(savePath);\r\n  \r\n  /*\r\n   * savePath on iOS may be:\r\n   *  /var/mobile/Containers/Data/Application/B1308E13-35F1-41AB-A20D-3117BE8EE8FE/Documents/email-signature-262x100.png\r\n   *\r\n   * savePath on Android may be:\r\n   *  /data/data/com.wechatsample/files/email-signature-262x100.png\r\n   **/\r\n  await fs.downloadFile('http://www.ncloud.hk/email-signature-262x100.png', savePath);\r\n  let result = await WeChat.shareToTimeline({\r\n    type: 'imageFile',\r\n    title: 'image file download from network',\r\n    description: 'share image file to time line',\r\n    mediaTagName: 'email signature',\r\n    messageAction: undefined,\r\n    messageExt: undefined,\r\n    imageUrl: \"file://\" + savePath // require the prefix on both iOS and Android platform\r\n  });\r\n  console.log('share image file to time line successful:', result);\r\n} catch (e) {\r\n  if (e instanceof WeChat.WechatError) {\r\n    console.error(e.stack);\r\n  } else {\r\n    throw e;\r\n  }\r\n}\r\n\r\n// Code example to share image resource:\r\ntry {\r\n  let imageResource = require('./email-signature-262x100.png');\r\n  let result = await WeChat.shareToTimeline({\r\n    type: 'imageResource',\r\n    title: 'resource image',\r\n    description: 'share resource image to time line',\r\n    mediaTagName: 'email signature',\r\n    messageAction: undefined,\r\n    messageExt: undefined,\r\n    imageUrl: resolveAssetSource(imageResource).uri\r\n  });\r\n  console.log('share resource image to time line successful', result);\r\n}\r\ncatch (e) {\r\n  if (e instanceof WeChat.WechatError) {\r\n    console.error(e.stack);\r\n  } else {\r\n    throw e;\r\n  }\r\n}\r\n\r\n// Code example to download an word file from web, then share it to WeChat session\r\n// only support to share to session but time line\r\n// iOS code use DocumentDirectoryPath\r\ntry {\r\n  let rootPath = fs.DocumentDirectoryPath;\r\n  let fileName = 'signature_method.doc';\r\n  /*\r\n   * savePath on iOS may be:\r\n   *  /var/mobile/Containers/Data/Application/B1308E13-35F1-41AB-A20D-3117BE8EE8FE/Documents/signature_method.doc\r\n   **/ \r\n  let savePath = rootPath + '/' + fileName;\r\n\r\n  await fs.downloadFile('https://open.weixin.qq.com/zh_CN/htmledition/res/assets/signature_method.doc', savePath);\r\n  let result = await WeChat.shareToSession({\r\n    type: 'file',\r\n    title: fileName, // WeChat app treat title as file name\r\n    description: 'share word file to chat session',\r\n    mediaTagName: 'word file',\r\n    messageAction: undefined,\r\n    messageExt: undefined,\r\n    filePath: savePath,\r\n    fileExtension: '.doc'\r\n  });\r\n  console.log('share word file to chat session successful', result);\r\n} catch (e) {\r\n  if (e instanceof WeChat.WechatError) {\r\n    console.error(e.stack);\r\n  } else {\r\n    throw e;\r\n  }\r\n}\r\n\r\n//android code use ExternalDirectoryPath\r\ntry {\r\n  let rootPath = fs.ExternalDirectoryPath;\r\n  let fileName = 'signature_method.doc';\r\n  /*\r\n   * savePath on Android may be:\r\n   *  /storage/emulated/0/Android/data/com.wechatsample/files/signature_method.doc\r\n   **/\r\n  let savePath = rootPath + '/' + fileName;\r\n  await fs.downloadFile('https://open.weixin.qq.com/zh_CN/htmledition/res/assets/signature_method.doc', savePath);\r\n  let result = await WeChat.shareToSession({\r\n    type: 'file',\r\n    title: fileName, // WeChat app treat title as file name\r\n    description: 'share word file to chat session',\r\n    mediaTagName: 'word file',\r\n    messageAction: undefined,\r\n    messageExt: undefined,\r\n    filePath: savePath,\r\n    fileExtension: '.doc'\r\n  });\r\n  console.log('share word file to chat session successful', result);\r\n}\r\ncatch (e) {\r\n  if (e instanceof WeChat.WechatError) {\r\n    console.error(e.stack);\r\n  } else {\r\n    throw e;\r\n  }\r\n}\r\n```\r\n\r\n#### shareToSession(data)\r\n\r\nSimilar to `shareToTimeline` but send message to a friend or a groups.\r\n\r\n#### pay(data)\r\n\r\nCreate a request to proceeding payment.\r\n\r\n```js\r\nconst result = await WeChat.pay(\r\n  {\r\n    partnerId: '',  // 商家向财付通申请的商家id\r\n    prepayId: '',   // 预支付订单\r\n    nonceStr: '',   // 随机串，防重发\r\n    timeStamp: '',  // 时间戳，防重发\r\n    package: '',    // 商家根据财付通文档填写的数据和签名\r\n    sign: ''        // 商家根据微信开放平台文档对数据做的签名\r\n  }\r\n);\r\n```\r\n\r\nIt returns an object like this:\r\n\r\n| name    | type   | description                         |\r\n|---------|--------|-------------------------------------|\r\n| errCode | Number | 0 if authorization successed        |\r\n| errStr  | String | Error message if any error occurred |\r\n\r\n#### addListener(eventType, listener[, context])\r\n\r\nAdds a listener to be invoked when events of the specified type are emitted. An optional calling context may be provided. \r\n\r\nReturn a object like `{remove: function}` which can be used to remove this listener.\r\n\r\n#### once(eventType, listener[, context])\r\n\r\nSimilar to addListener, except that the listener is removed after it is invoked once.\r\n\r\n#### removeAllListeners()\r\n\r\nRemoves all of the registered listeners, including those registered as listener maps.\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install react-native-wechat --save\r\n```\r\n\r\n## Community\r\n\r\n- [Join us at gitter](https://gitter.im/weflex/react-native-wechat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n- QQ Group: 336021910\r\n\r\n## Who Use It\r\n- [reading: iReading App Write In React-Native](https://github.com/attentiveness/reading)\r\n\r\n## Authors\r\n\r\n- [Deng Yun]\r\n- [Xing Zhen]\r\n- [Yorkie Liu]\r\n\r\n## License\r\n\r\nMIT @ [WeFlex], Inc\r\n\r\n[react-native-wechat]: https://github.com/weflex/react-native-wechat\r\n[npm-image]: https://img.shields.io/npm/v/react-native-wechat.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/react-native-wechat\r\n[travis-image]: https://img.shields.io/travis/weflex/react-native-wechat.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/weflex/react-native-wechat\r\n[david-image]: http://img.shields.io/david/weflex/react-native-wechat.svg?style=flat-square\r\n[david-url]: https://david-dm.org/weflex/react-native-wechat\r\n[downloads-image]: http://img.shields.io/npm/dm/react-native-wechat.svg?style=flat-square\r\n[downloads-url]: https://npmjs.org/package/react-native-wechat\r\n[Deng Yun]: https://github.com/tdzl2003\r\n[Xing Zhen]: https://github.com/xing-zheng\r\n[Yorkie Liu]: https://github.com/yorkie\r\n[WeFlex]: https://github.com/weflex\r\n[react-native-cn]: https://github.com/reactnativecn\r\n[WeChat SDK]: https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=1417674108&token=&lang=zh_CN\r\n[Linking Libraries iOS Guidance]:\r\nhttps://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/weflex/react-native-wechat.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.9.5"
}
